<div id="product-modal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"></div>
<div class="row" name="test">
    <div class="col-md-1">
        <label><input type="radio" name="entryPlan" value="hoge1" onclick="entryChange1();" checked />HARP基盤関連</label>
        <label><input type="radio" name="entryPlan" value="hoge2" onclick="entryChange1();" />HARP基盤関係なし</label>
            <div class="btn-group-vertical" role="group" aria-label="Left Align">
                <div id="kiban">
                    <% @hservices.where(kibanRelation: [1, 2]).each do |i| %>
                        <%= button_tag type: 'button', class: "btn btn-default", onclick: "changeShowKey('#{i.keyName}','')" do %>
                            <%= "#{i.serviceName}" %>
                        <% end %>
                    <% end %>
                </div>
            </div>


            <a href="#" id="username" data-type="text" data-resource="post" data-name="username" data-url="/posts/1" data-original-title="Enter username">superuser</a>
        <td><%= editable @test, :cityname, url: {:action => 'update'} %></td>

        
            <div class="btn-group-vertical" role="group" aria-label="Left Align">
                <div  id="service">
                    <% @hservices.where(kibanRelation: 0).each do |i| %>
                        <%= button_tag type: 'button', class: "btn btn-default", onclick: "changeShowKey('#{i.keyName}','')" do %>
                            <%= "#{i.serviceName}" %>
                        <% end %>
                    <% end %>
                </div>
            </div>
        <div class="btn-group-vertical" role="group" style = "margin: 10px 0px 0px 0px;">
            <%= link_to "自治体情報.xls", hokkaido_csv_path(format: "xls"), class: "btn btn-large btn-primary" %>
            <%= link_to "更新情報.xls", hokkaido_csv_version_path(format: "xls"), class: "btn btn-large btn-primary" %>
        </div>
    </div>
    <div class="col-md-7" style="width:924px; height:760px;">
        <div class="col-md-7" id="map" style="width:924px; height:700px;"></div>
    </div>
    <div class="col-md-4" style="width:350px; height:750px;">
        <%= form_tag '/hokkaido', :method => 'get' do %>
           <%= text_field_tag :search, params[:search] %>
           <%= submit_tag "自治体検索", :cityname => nil, class: "btn btn-primary" %>
        <% end %>
        <% if params.has_key?(:search) then %>
            <div>
                <tbody>
                <% @search.each do |hvalue| %>
                    <tr>
                        <td><%= link_to hvalue.cityname, '#', :onMouseover => "changeCityColor(#{hvalue.cityid})", :onMouseout => "backCityColor(#{hvalue.cityid})" ,:onclick => "get_data(#{hvalue.id})", :class => "aaaaa", :id =>hvalue.cityid %></td>
                    </tr>
                <% end %>
                </tbody>
            </div>
        <% end %>
        <iframe src=<%= @iframeURL %> frameborder="0" height="670" scrolling="yes"></iframe>
    </div>
</div>
<script type="text/javascript">

    function changeCityColor(param){
        d3.selectAll(".hokkaido."+param.id)
        .transition().duration(100).attr("fill", "red")
    }

    var color = ["#ffffff", "#29D2F3", "#b3ffff", "#b3fff2", "#b3ffd9", "#b3ffcc",
                "#b3ffb3", "#bfffb3", "#d9ffb3", "#e6ffb3", "#ffffb3", "#fff2b3",
                "#ffd9b3", "#ffccb3", "#ffb3bf", "#ffb3d9", "#ffb3e6", "#ffb3ff",
                "#f2b3ff", "#d9b3ff", "#ccb3ff", "#b3b3ff", "#b3bfff", "#b3d9ff"]
    var areaGrad = d3.scale.ordinal()
            .domain(["未導入", "導入", "不参加", "参加", "HARP", "HDC", "HID", "ズコーシャ", "三和", "TKC", "富士通", "HBA", "SEC", "iTEC", "TAS", "NEC", "北海HISYS", "アート", "アイネス", "CB", "HCC", "IBM", "SSE", "BMC", "町村会", "RKK", "その他", "改訂", "基準（町村会）", "改訂（町村会）", "基準（町村会）"])
            .range([color[0], color[1], color[0], color[1], color[1], color[2], color[3], color[4], color[5], color[6], color[7], color[8], color[9], color[10], color[11], color[12], color[13], color[14], color[15], color[16], color[17], color[18], color[19], color[20], color[21], color[22], color[23], color[1], color[5], color[10], color[15]]);
    var current_showKey;
    function backCityColor(param){
        d3.selectAll(".hokkaido."+param.id)
        .transition().duration(100).attr("fill", areaGrad(attrHash[param.id][current_showKey]))
    }

    function entryChange1(){
        radio = document.getElementsByName('entryPlan')
        if(radio[0].checked) {
            document.getElementById('kiban').style.display = "";
            document.getElementById('service').style.display = "none";
        }else if(radio[1].checked) {
            document.getElementById('kiban').style.display = "none";
            document.getElementById('service').style.display = "";
        }
    }
    window.onload = entryChange1;

    function get_data(id){
            $.get( "/hokkaido/" + id + "/edit", function( data ) {
            $( "#product-modal" ).html( data )
            $("#product-modal").modal("show")
        })
    }

    var div = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

    var div2 = d3.select("body").append("div")
      .attr("class", "tooltip2")
      .style("opacity", 0);

    var div3 = d3.select("body").append("div")
      .attr("class", "tooltip3")
      .style("opacity", 0);

    // file読み込み制御用
    var readTopofileDone = false;
    var readAttrfileDone = false;
    // filedata格納変数
    var topodata;
    var attrdata;
    // mapの設定値
    var map_width = 860;
    var map_height = 700;
    var svg;
    // map読み込み完了フラグ
    var drawMapDone = false;


    // 配列の最大値を求める関数を定義しておく
    Array.prototype.max = function () {
        return Math.max.apply(Math, this);
    };
    Array.prototype.min = function () {
        return Math.min.apply(Math, this);
    };
    // 数値かどうかを判定する関数を定義しておく
    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    var attrHash = new Object();
    var elementsHash = new Object();
    var maxHash = new Object();
    var minHash = new Object();

    function readTopofile(json) {
        topodata = json;
        readTopofileDone = true;
    }
    function readAttrfile(json) {
        attrdata = json;
        readAttrfileDone = true;
    }
    function readTopofile2(json) {
        topo2data = json;
        readTopofile2Done = true;
    }

    d3.json("hokkaido/hokkaido_map", function(error, json) {
        if(error) return console.warn(error);
            readTopofile(json);
            if (readTopofileDone && readAttrfileDone && readTopofile2Done) {
                main(topodata, attrdata, topo2data);
            }
        });

    d3.json("hokkaido/hokkaido_value", function(error, json) {
        if(error) return console.warn(error);
            readAttrfile(json);
            if (readTopofileDone && readAttrfileDone && readTopofile2Done) {
                main(topodata, attrdata, topo2data);
            }
        });

    d3.json("hokkaido/hokkaido_only", function(error, json) {
        if(error) return console.warn(error);
            readTopofile2(json);
            if (readTopofileDone && readAttrfileDone && readTopofile2Done) {
                main(topodata, attrdata, topo2data);
            }
        });

    function main(topo, attr, topo2) {

        var labelLineHight = 16;

        // attr情報をIDをkeyとするhash tableに変換する
        // idをKeyとしたhashテーブル＆property毎のhashテーブルを作成する
        attr.forEach(function(e){
            attrHash[e.cityid]=e;
            for (var k in e) {
                if( k in elementsHash) {
                    elementsHash[k].push(e[k]);
                } else {
                    elementsHash[k] = [e[k]];
                }
            }
        });
        for (var k in elementsHash) {
            if (isNumeric(elementsHash[k][0])) {
                maxHash[k] = elementsHash[k].max();
                minHash[k] = elementsHash[k].min();
            }
        }

         // svgを追加
        svg = d3.select("body #map").append("svg")
                .attr("width", '100%')
                .attr("height", '100%');
        var g = svg.append("g");

        //北海道だけのMAPを描写
        var drawHokkaidoOnly;
        function drawHokkaidoOnly(){
            // 北海道のmapだけを読み込み
            var hokkaidoOnly = topojson.feature(topo2, topo2.objects.japan)

            // 北海道を中心に指定したメルカトル図法で10万分の1で描画する
            var projection = d3.geo.mercator()
                    .center([120.79,33.45])
                    .scale(1000)
                    .translate([map_width / 2, map_height / 2]);

            // pathを作成する
            var path = d3.geo.path().projection(projection);
            svg.append("path")
              .datum(hokkaidoOnly)
              .attr({
                    "class": "hokkaido id010006",
                    "d": path,
                    "fill": "#CEF6CE",
                    "stroke": "#D3D3D3"
                })
              .on("click", function(d) {
                    $.get( "/hokkaido/180/edit", function( data ) {
                    $( "#product-modal" ).html( data )
                    $("#product-modal").modal("show")
                })
              })
              .on("mouseover", function(d) {
                  svg.selectAll(".hokkaido.id010006")
                  .transition().duration(100).attr("fill", "red")
              })
              .on("mouseout", function(d) {
                  svg.selectAll(".hokkaido.id010006")
                  .transition().duration(200).attr("fill", "#CEF6CE");
              })

                svg.append('circle')
                    .attr({
                      'cx': 810,
                      'cy': 130,
                      'r': 70,
                      'fill': "none",
                      'stroke': "black"
                    });

              svg.append("text")
                .attr("id", "hokkaidoName")
                .attr("x", 795)
                .attr("y", 130)
                .attr("font-size", "13px")
                .style("fill", "black")
                .text("北海道");

            drawHokkaidoOnly = true;
        }
        drawHokkaidoOnly();

        // 北海道のmapを読み込み
        var hokkaido = topojson.feature(topo, topo.objects.hokkaido)

        // 北海道の中心を指定したメルカトル図法でサイズ指定
        var projection = d3.geo.mercator()
                .center([142.35,43.5])
                .scale(7000)
                .translate([map_width / 2, map_height / 2]);

        // pathを作成する
        var path = d3.geo.path().projection(projection);

        // 地形要素追加
        g.append("path")
          .datum(topojson.mesh(topo, topo.objects.hokkaido, function(a, b) { return a == b; }))
          .attr({
            "d": path,
            "fill": "#fff"
        });

        // classを指定して描画
         g.selectAll(".hokkaido")
            .data(hokkaido.features)
            .enter().append("path")　
            .attr("class", function(d) {
                return "hokkaido " + d.properties.cityname;
                })
            .attr("d", path)
            .attr("fill", "#CEF6CE")
            .on("click", function(d) {
                    $.get( "/hokkaido/" + attrHash[d.properties.cityname].id + "/edit", function( data ) {
                    $( "#product-modal" ).html( data )
                    $("#product-modal").modal("show")
                })
            })
            .on("mouseover", function(d) {
                svg.selectAll(".hokkaido." + attrHash[d.properties.cityname].cityid)
                .transition().duration(100).attr("fill", "red")
                .style("opacity", 1);div.transition().duration(100)
                .style("opacity", 1)
            })
            .on("mouseout", function(d) {
                svg.selectAll(".hokkaido." + attrHash[d.properties.cityname].cityid)
                .transition().duration(200).attr("fill", "#CEF6CE");
            })

        //自治体ON/OFFボタン用スペース作成
        svg.append("rect")
        .attr("x", 690)
        .attr("y", 598)
        .attr("height", 30)
        .attr("width", 200)
        .attr("rx", 20)
        .attr("ry", 20)
        .attr("stroke", "black")
        .attr("fill", "none");
        svg.append("text")
        .attr("x", 760)
        .attr("y", 595)
        .attr("font-size", "20px")
        .style("fill", "black")
        .style("font-weight", "bold")
        .text("市町村");

        //振興局ON/OFFボタン用スペース作成
        svg.append("rect")
        .attr("x", 690)
        .attr("y", 658)
        .attr("height", 30)
        .attr("width", 200)
        .attr("rx", 20)
        .attr("ry", 20)
        .attr("stroke", "black")
        .attr("fill", "none");
        svg.append("text")
        .attr("x", 760)
        .attr("y", 655)
        .attr("font-size", "20px")
        .style("fill", "black")
        .style("font-weight", "bold")
        .text("振興局");

        //境界要素追加
        var drawBorderDone;
        function drawBorder(){
                g.append("path")
                    .datum(topojson.mesh(topo, topo.objects.hokkaido, function(a, b) { return a !== b; }))
                    .attr({
                  "d": path,
                  "id": "border",
                   "fill": "none",
                   "stroke": "#D3D3D3"
                });
            drawBorderDone = true;
        }
        drawBorder();

        // 境界線ON/OFF button
        svg.append("text")
        .attr("x", 780)
        .attr("y", 620)
        .attr("font-size", "20px")
        .attr("id", "border_on_off")
        .attr("style", "cursor: pointer;")
        .style("fill", "#F66780")
        .text("境界線ON")
        .on("click", function(){
            if(drawBorderDone){
                    d3.selectAll("#border_on_off")
                    .style("fill", "#2E9AFE")
                    .text("境界線OFF")
                    d3.selectAll("#border").remove();
                    drawBorderDone = false;
            }
            else{
                d3.selectAll("#border_on_off")
                .style("fill", "#F66780")
                .text("境界線ON")
                drawBorder();
            }
        });


        /*振興局の外枠作成用にいろいろいじったやつ
        var bureau_id = [];
        for(var i in attrHash) {
            var bureau_name = attrHash[i]["bureau"];
            var cityid_number = attrHash[i]["cityid"]
            bureau_id.push({
                bureau_name :cityid_number
            })
        }
        */
        var isikari = d3.set(["id011002","id012173","id012246","id012319","id012343","id012351",
                                "id012330", "id013030", "id013048"]);
        var ohotuku = d3.set(["id012084", "id012114", "id012190", "id015431", "id015440", "id015458",
                            "id015466", "id015474", "id015491", "id015504", "id015521", "id015555",
                            "id015598", "id015601", "id015610", "id015628", "id015636", "id015644"]);
        var sorachi = d3.set(["id012092", "id012106", "id012157", "id012165", "id012181", "id012220",
                            "id012254", "id012262", "id012271", "id012289", "id014231", "id014249",
                            "id014257", "id014273", "id014281", "id014290", "id014303", "id014311",
                            "id014320", "id014338", "id014346", "id014362", "id014371", "id014389"]);
        var kushiro = d3.set(["id012068", "id016616", "id016624", "id016632", "id016641", "id016659",
                            "id016675", "id016683"]);
        var koushi = d3.set(["id012033", "id013919", "id013927", "id013935", "id013943", "id013951",
                           "id013960", "id013978", "id013986", "id013994", "id014001", "id014010",
                           "id014028", "id014036", "id014044", "id014052", "id014061", "id014079",
                           "id014087", "id014095"]);
        var nemuro = d3.set(["id012238", "id016918", "id016926", "id016934", "id016942"]);
        var souya = d3.set(["id012149", "id015113", "id015121", "id015130", "id015148", "id015164",
                           "id015172", "id015181", "id015199", "id015202"]);
        var tokachi = d3.set(["id012076", "id016314", "id016322", "id016331", "id016349", "id016357",
                            "id016365", "id016373", "id016381", "id016390", "id016411", "id016420",
                            "id016438", "id016446", "id016454", "id016462", "id016471", "id016489",
                            "id016497"]);
        var kamikawa = d3.set(["id012041", "id012203", "id012211", "id012297", "id014524", "id014532",
                             "id014541", "id014559", "id014567", "id014575", "id014583", "id014591",
                             "id014605", "id014613", "id014621", "id014630", "id014648", "id014656",
                             "id014681", "id014699", "id014702", "id014711", "id014729"]);
        var iburi = d3.set(["id012335", "id012050", "id012131", "id012301", "id015717", "id015750",
                          "id015784", "id015814", "id015849", "id015857", "id015865"]);
        var watarishima = d3.set(["id012025", "id012360", "id013315", "id013323", "id013331", "id013340",
                                "id013374", "id013439", "id013455", "id013463", "id013471"]);
        var hidaka = d3.set(["id016012", "id016021", "id016047", "id016071", "id016080", "id016098",
                           "id016101"]);
        var rumoi = d3.set(["id012122", "id014818", "id014826", "id014834", "id014842", "id014851",
                          "id014869", "id014877"]);
        var hiyama = d3.set(["id013617", "id013625", "id013633", "id013641", "id013676", "id013706",
                           "id013714"]);


        /* 振興局の外枠をループで作成しようとしたやつ。なぜかできない。
        var bureau = [isikari, ohotuku, sorachi, kushiro, koushi, nemuro, souya, tokachi, kamikawa, iburi, watarishima, hidaka, rumoi, hiyama]
        for (var i in bureau.length) {
             svg.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return bureau[i].has(d.properties["cityname"]); })))
                .attr({
                  "d": path,
                  "fill": "#333",
                  "stroke": "#000",
                })
        }
        */

        //マージエリア追加
        var bureauColor = "#8B4513"
        var drawBureauBorderDone;
        function drawBureauBorder(){
                g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return isikari.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return sorachi.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return ohotuku.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return kushiro.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return koushi.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return nemuro.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return souya.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return tokachi.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return kamikawa.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return watarishima.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return hidaka.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return iburi.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return rumoi.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
                 g.append("path")
                .datum(topojson.merge(topo, topo.objects.hokkaido.geometries.filter(function(d) { return hiyama.has(d.properties["cityname"]); })))
                .attr({
                  "d": path, "fill": "none", "stroke": bureauColor, "id": "bureauBorder"
                })
            drawBureauBorderDone = true;
        }
        drawBureauBorder();

        // 振興局境界線ON/OFF button

        svg.append("text")
        .attr("x", 780)
        .attr("y", 680)
        .attr("font-size", "20px")
        .attr("id", "bureauBorder_on_off")
        .attr("style", "cursor: pointer;")
        .style("fill", "#F66780")
        .text("境界線ON")
        .on("click", function(){
            if(drawBureauBorderDone){
                    d3.selectAll("#bureauBorder_on_off")
                    .style("fill", "#2E9AFE")
                    .text("境界線OFF")
                    d3.selectAll("#bureauBorder").remove();
                    drawBureauBorderDone = false;
            }
            else{
                d3.selectAll("#bureauBorder_on_off")
                .style("fill", "#F66780")
                .text("境界線ON")
                drawBureauBorder();
            }
        });

        var bureauName = [
            {name:"空知総合", x:340, y:370},
            {name:"石狩", x:285, y:430},
            {name:"後志", x:210, y:450},
            {name:"胆振", x:300, y:505},
            {name:"日高", x:425, y:535},
            {name:"渡島総合", x:210, y:610},
            {name:"檜山", x:100, y:540},
            {name:"檜山", x:130, y:630},
            {name:"上川総合", x:400, y:280},
            {name:"留萌", x:330, y:230},
            {name:"宗谷総合", x:340, y:80},
            {name:"オホーツク総合", x:530, y:270},
            {name:"十勝総合", x:490, y:450},
            {name:"釧路総合", x:630, y:420},
            {name:"根室", x:730, y:350}
        ]

        // 振興局名貼り付け
        var drawBureauNameDone;
        function drawBureauName(){
                g.selectAll("bureauBorder")
                .data(bureauName)
                .enter()
                .append("text")
                .attr("id", "bureauName")
                .attr("x", function(d){return d.x})
                .attr("y", function(d){return d.y})
                .attr("font-size", "25px")
                .style("fill", bureauColor)
                .text(function(d){return d.name});
                drawBureauNameDone = true;
        }

        // 振興局名のラベルON/OFF button
        svg.append("text")
        .attr("x", 700)
        .attr("y", 680)
        .attr("font-size", "20px")
        .attr("id", "bureau_on_off")
        .attr("style", "cursor: pointer;")
        .style("fill", "#2E9AFE")
        .text("名前OFF")
        .on("click", function(){
            if(drawBureauNameDone){
                    d3.selectAll("#bureau_on_off")
                    .style("fill", "#2E9AFE")
                    .text("名前OFF")
                    d3.selectAll("#bureauName").remove();
                    drawBureauNameDone = false;
            }
            else{
                d3.selectAll("#bureau_on_off")
                .style("fill", "#F66780")
                .text("名前ON")
                drawBureauName();
            }
        });


        // 市町村名のラベル貼り
        var drawCityNameDone;
        function drawCityName(){
            g.selectAll(".cityname-label")
                .data(hokkaido.features)
              .enter()
                .append("text")
                    .attr("class", function(d) {
                        return "cityname-label "+d.properties.cityname; /* class名にidを付与 */
                        })
                    .attr("id", "cityName")
                    .attr("transform", function(d) {
                        // 文字をpath中央から、文字高さ1/2分高い位置に貼る
                        var pos = path.centroid(d);
                        pos[1] -= labelLineHight / 8;
                        return "translate(" + pos + ")";
                    })
                    .attr("dy", ".35em")
                    .style("font-size", "9px")
                    .text(function(d) {
                        return attrHash[d.properties.cityname].cityname;
                    });
                    // CSSで一旦display:noneを指定しているので、各区の先頭object上のみラベルを表示する
            for (var k in attrHash) {
                svg.select(".cityname-label."+k).style("display", "block");
                svg.select(".stat-label."+k).style("display", "block");
            }
            drawCityNameDone = true;
        }

        // 市町村名のラベルON/OFF button
        svg.append("text")
        .attr("x", 700)
        .attr("y", 620)
        .attr("font-size", "20px")
        .attr("id", "city_on_off")
        .attr("style", "cursor: pointer;")
        .style("fill", "#2E9AFE")
        .text("名前OFF")
        .on("click", function(){
            if(drawCityNameDone){
                    d3.selectAll("#city_on_off")
                    .style("fill", "#2E9AFE")
                    .text("名前OFF")
                    d3.selectAll("#cityName").remove();
                    drawCityNameDone = false;
            }
            else{
                d3.selectAll("#city_on_off")
                .style("fill", "#F66780")
                .text("名前ON")
                drawCityName();
            }
        });

        // zoom and pan
        var zoom = d3.behavior.zoom()
        .on("zoom",function() {
            g.attr("transform","translate("+
                d3.event.translate.join(",")+")scale("+d3.event.scale+")");
            g.selectAll("circle")
            .attr("d", path.projection(projection));
            g.selectAll("path")
            .attr("d", path.projection(projection));
        });
        svg.call(zoom)

        drawMapDone = true;
        changeShowKey("kiban");
    }

    function changeShowKey(showKey, unit) {

        if (drawMapDone == false) {
            return;
        }
        current_showKey = showKey

        // 色塗り
        var showElements = elementsHash[showKey].slice(0);
        showElements.sort(function(a, b){ return a - b; });

        for (var k in attrHash) {
            if (k == "id010006"){
                e = attrHash["id010006"]
                svg.selectAll(".hokkaido."+ "id010006")
                .attr("fill", areaGrad(e[showKey]))
                .attr("style", "cursor: pointer;")
                .on("mouseover", function(d) {
                    var kiban = ( e.kiban== "導入" ) ? "○" : "×";
                    var eac = ( e.eac == "導入" ) ? "<%= @hservices.find_by(keyName: "eac").serviceName %>" + "、" : "";
                    var frs = ( e.frs == "導入" ) ? "<%= @hservices.find_by(keyName: "frs").serviceName %>" + "、" : "";
                    var eps = ( e.eps == "導入" ) ? "<%= @hservices.find_by(keyName: "eps").serviceName %>" + "、" : "";
                    var ca = ( e.ca == "導入" ) ? "<%= @hservices.find_by(keyName: "ca").serviceName %>" + "、" : "";
                    var kokaike = ( e.kokaike == "改訂" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike2 = ( e.kokaike == "基準" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike3 = ( e.kokaike == "改訂（町村会）" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike4 = ( e.kokaike == "基準（町村会）" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var todoku = ( e.todoku == "導入" ) ? "<%= @hservices.find_by(keyName: "todoku").serviceName %>" + "、" : "";
                    var gw = ( e.gw == "導入" ) ? "<%= @hservices.find_by(keyName: "gw").serviceName %>" + "、" : "";
                    var cms = ( e.cms == "導入" ) ? "<%= @hservices.find_by(keyName: "cms").serviceName %>" + "、" : "";
                    var rs = ( e.rs == "導入" ) ? "<%= @hservices.find_by(keyName: "rs").serviceName %>" + "、" : "";
                    var ps = ( e.ps == "導入" ) ? "<%= @hservices.find_by(keyName: "ps").serviceName %>" + "、" : "";
                    var fn = ( e.fn == "導入" ) ? "<%= @hservices.find_by(keyName: "fn").serviceName %>" + "、" : "";
                    var kiban_kei =  eac + frs + eps + ca + kokaike + kokaike2 + kokaike3 + kokaike4 + todoku + gw + cms + rs + ps + fn;

                    var el_kyodo = ( e.el_kyodo== "導入" ) ? "<%= @hservices.find_by(keyName: "el_kyodo").serviceName %>" + "、" : "";
                    var koumu = ( e.koumu== "導入" ) ? "<%= @hservices.find_by(keyName: "koumu").serviceName %>" + "、" : "";
                    var ns = ( e.ns == "導入" ) ? "<%= @hservices.find_by(keyName: "ns").serviceName %>" + "、" : "";
                    var mail = ( e.mail == "導入" ) ? "<%= @hservices.find_by(keyName: "mail").serviceName %>" + "、" : "";
                    var bu = ( e.bu == "導入" ) ? "<%= @hservices.find_by(keyName: "bu").serviceName %>" + "、" : "";
                    var ib = ( e.ib == "導入" ) ? "<%= @hservices.find_by(keyName: "ib").serviceName %>" + "、" : "";
                    var vender = ( e.vender == "HARP" ) ? "<%= @hservices.find_by(keyName: "vender").serviceName %>" + "、" : "";
                    var kiban_igai = el_kyodo + koumu + ns + mail + bu + ib + vender;
                    // の末尾に"、"がある場合は削除
                    var kiban_keiAfter = ( kiban_kei.substr( (kiban_kei.length-1) )  == "、" ) ? kiban_kei.substr( 0 , (kiban_kei.length-1) ) : kiban_kei;
                    var kiban_igaiAfter = ( kiban_igai.substr( (kiban_igai.length-1) )  == "、" ) ? kiban_igai.substr( 0 , (kiban_igai.length-1) ) : kiban_igai;
                    var content = "";
                    content += "<center>"+ e.cityname + "</center>";
                    content += "<center>" + "【HARP基盤負担】" + kiban + "</center>";
                    content += "<center>"+ "--------------HARP基盤関連サービス--------------" + "</center>";
                    content += kiban_keiAfter
                    content += "<center>" + "</center>";
                    content += "<center>"+ "-----------------HARP基盤関係なし-----------------" + "</center>";
                    content += kiban_igaiAfter
                    svg.selectAll(".hokkaido." + e.cityid)
                    .transition().duration(100).attr("fill", "red")
                    .style("opacity", 1);div.transition().duration(100)
                    .style("opacity", 1)
                    div.html(content)
                    .style("left", (d3.event.pageX +30) + "px")
                    .style("top", (d3.event.pageY -100) + "px");
                })
                .on("mouseout", function(d) {
                    svg.selectAll(".hokkaido." + e.cityid)
                    .transition().duration(200).attr("fill", areaGrad(e[showKey]))
                    .style("opacity", 1.0);
                    div.transition().duration(200)
                    .style("opacity", 0);
                })

            }
            else{
                svg.selectAll(".hokkaido."+k)
                .attr("fill", areaGrad(attrHash[k][showKey]))
                .attr("style", "cursor: pointer;")
                .on("mouseover", function(d) {
                    var kiban = ( attrHash[d.properties.cityname].kiban== "導入" ) ? "○" : "×";
                    var eac = ( attrHash[d.properties.cityname].eac == "導入" ) ? "<%= @hservices.find_by(keyName: "eac").serviceName %>" + "、" : "";
                    var frs = ( attrHash[d.properties.cityname].frs == "導入" ) ? "<%= @hservices.find_by(keyName: "frs").serviceName %>" + "、" : "";
                    var eps = ( attrHash[d.properties.cityname].eps == "導入" ) ? "<%= @hservices.find_by(keyName: "eps").serviceName %>" + "、" : "";
                    var ca = ( attrHash[d.properties.cityname].ca == "導入" ) ? "<%= @hservices.find_by(keyName: "ca").serviceName %>" + "、" : "";
                    var kokaike = ( attrHash[d.properties.cityname].kokaike == "改訂" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike2 = ( attrHash[d.properties.cityname].kokaike == "基準" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike3 = ( attrHash[d.properties.cityname].kokaike == "改訂（町村会）" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var kokaike4 = ( attrHash[d.properties.cityname].kokaike == "基準（町村会）" ) ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>" + "、" : "";
                    var todoku = ( attrHash[d.properties.cityname].todoku == "導入" ) ? "<%= @hservices.find_by(keyName: "todoku").serviceName %>" + "、" : "";
                    var gw = ( attrHash[d.properties.cityname].gw == "導入" ) ? "<%= @hservices.find_by(keyName: "gw").serviceName %>" + "、" : "";
                    var cms = ( attrHash[d.properties.cityname].cms == "導入" ) ? "<%= @hservices.find_by(keyName: "cms").serviceName %>" + "、" : "";
                    var rs = ( attrHash[d.properties.cityname].rs == "導入" ) ? "<%= @hservices.find_by(keyName: "rs").serviceName %>" + "、" : "";
                    var ps = ( attrHash[d.properties.cityname].ps == "導入" ) ? "<%= @hservices.find_by(keyName: "ps").serviceName %>" + "、" : "";
                    var fn = ( attrHash[d.properties.cityname].fn == "導入" ) ? "<%= @hservices.find_by(keyName: "fn").serviceName %>" + "、" : "";
                    var kiban_kei =  eac + frs + eps + ca + kokaike + kokaike2 + kokaike3 + kokaike4 + todoku + gw + cms + rs + ps + fn;

                    var el_kyodo = ( attrHash[d.properties.cityname].el_kyodo== "導入" ) ? "<%= @hservices.find_by(keyName: "el_kyodo").serviceName %>" + "、" : "";
                    var koumu = ( attrHash[d.properties.cityname].koumu== "導入" ) ? "<%= @hservices.find_by(keyName: "koumu").serviceName %>" + "、" : "";
                    var ns = ( attrHash[d.properties.cityname].ns == "導入" ) ? "<%= @hservices.find_by(keyName: "ns").serviceName %>" + "、" : "";
                    var mail = ( attrHash[d.properties.cityname].mail == "導入" ) ? "<%= @hservices.find_by(keyName: "mail").serviceName %>" + "、" : "";
                    var bu = ( attrHash[d.properties.cityname].bu == "導入" ) ? "<%= @hservices.find_by(keyName: "bu").serviceName %>" + "、" : "";
                    var ib = ( attrHash[d.properties.cityname].ib == "導入" ) ? "<%= @hservices.find_by(keyName: "ib").serviceName %>" + "、" : "";
                    var vender = ( attrHash[d.properties.cityname].vender == "HARP" ) ? "<%= @hservices.find_by(keyName: "vender").serviceName %>" + "、" : "";
                    var kiban_igai = el_kyodo + koumu + ns + mail + bu + ib + vender;
                    // の末尾に"、"がある場合は削除
                    var kiban_keiAfter = ( kiban_kei.substr( (kiban_kei.length-1) )  == "、" ) ? kiban_kei.substr( 0 , (kiban_kei.length-1) ) : kiban_kei;
                    var kiban_igaiAfter = ( kiban_igai.substr( (kiban_igai.length-1) )  == "、" ) ? kiban_igai.substr( 0 , (kiban_igai.length-1) ) : kiban_igai;
                    var content = "";
                    content += "<center>"+ attrHash[d.properties.cityname].cityname + "</center>";
                    content += "<center>" + "【HARP基盤負担】" + kiban + "</center>";
                    content += "<center>"+ "--------------HARP基盤関連サービス--------------" + "</center>";
                    content += kiban_keiAfter
                    content += "<center>" + "</center>";
                    content += "<center>"+ "-----------------HARP基盤関係なし-----------------" + "</center>";
                    content += kiban_igaiAfter
                    svg.selectAll(".hokkaido." + attrHash[d.properties.cityname].cityid)
                    .transition().duration(100).attr("fill", "red")
                    .style("opacity", 1);div.transition().duration(100)
                    .style("opacity", 1)
                    div.html(content)
                    .style("left", (d3.event.pageX +30) + "px")
                    .style("top", (d3.event.pageY -100) + "px");
                })
                .on("mouseout", function(d) {
                    svg.selectAll(".hokkaido." + attrHash[d.properties.cityname].cityid)
                    .transition().duration(200).attr("fill", areaGrad(attrHash[d.properties.cityname][showKey]))
                    .style("opacity", 1.0);
                    div.transition().duration(200)
                    .style("opacity", 0);
                })
            }
        }
        //円グラフ用にデータをカウント
        var legend = {};
        for(var i in attrHash) {
            f = attrHash[i];
            if(!legend[f[showKey]]){
                legend[f[showKey]] = 0;
            }
            legend[f[showKey]]++;
        }

        //データセットをループで作成
        if (showKey == "vender"){
                var vender_name = ["その他", "hoge", "会社1", "会社2", "会社3", "会社4", "会社5", "会社6", "会社７", "会社８", "会社９", "会社１０", "会社１１", "会社１２", "会社１３", "会社１４", "会社１５", "会社１６", "会社１７", "会社１８", "会社１９", "会社２０", "会社２１"]
                var data4 = [];
                for (var l = 0; l < 24; l++) {
                    data4.push({
                        name: vender_name[l],
                        value: legend[vender_name[l]],
                        color: color[l]
                    });
                }}
        else if (showKey == "kokaike"){
                var kokaike_name = ["未導入", "改訂", "基準", "改訂（町村会）", "基準（町村会）"]
                var kokaike_color = [color[0], color[1], color[15], color[10], color[5]]
                var data4 = [];
                for (var l = 0; l < 5; l++) {
                    data4.push({
                        name: kokaike_name[l],
                        value: legend[kokaike_name[l]],
                        color: kokaike_color[l]
                    });
                }}
        else if  (showKey == "kyougi"){
                var others_name = ["不参加", "参加"]
                var others_color = [color[0], color[1]]
                var data4 = [];
                for (var l = 0; l < 2; l++) {
                    data4.push({
                        name: others_name[l],
                        value: legend[others_name[l]],
                        color: others_color[l]
                    });
                }}
        else{
                var others_name = ["未導入", "導入"]
                var others_color = [color[0], color[1]]
                var data4 = [];
                for (var l = 0; l < 2; l++) {
                    data4.push({
                        name: others_name[l],
                        value: legend[others_name[l]],
                        color: others_color[l]
                    });
                }}

        //data4からundefined以外を拾ってデータセットを作成
        var data3 = [];        for (var j = 0; j < data4.length; j++) {
            if (data4[j].value !== undefined) {
            data3.push(data4[j]);
        }}

        //円グラフの半径
        var radius = 100;
        var svg2 = svg.append("g")
            .attr("transform", "translate(" + [110, 110] + ")");
        var arc = d3.svg.arc()
                .outerRadius(radius)
                .innerRadius(0);

        var arcOver = d3.svg.arc()
                .outerRadius(radius + 50)
                .innerRadius(0);

        var pie = d3.layout.pie()
                .sort(null)
                .value(function(d){  return d.value ; });
        var g2 = svg2.selectAll(".fan")
                .data(pie(data3))
                .enter()
                .append("g")
                .attr("class", "fan")

        //円グラフ描写
        g2.append("path")
            .attr("d", arc)
            .attr("fill", function(d){  return d.data.color; })
            .on("mouseover", function (d) {
                d3.select(this).transition().duration(100)
                .attr("d", arcOver)
                .style("opacity", 1);
                div2.transition().duration(100)
                .style("opacity", 1)
                var per = (d.value/180)*100;
                var per2 = per.toFixed(1);
                var content = "";
                content += "<center>"+ d.data.name + "</center>";
                content += d.value + "/180自治体(" + per2 + "%)"
                div2.html(content)
                .style("left", (d3.event.pageX +10) + "px")
                .style("top", (d3.event.pageY -40) + "px");
            })
            .on("mouseout", function() {
                d3.select(this)
                .transition().duration(100)
                .attr("d", arc)
                .style("opacity", 1.0)
                div2.transition().duration(100)
                .style("opacity", 0);
            })

        //円グラフの名前
        g2.append("text")
            .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")";})
            .style("text-anchor", "middle")
            .text(function(d) { return d.data.name; });

        svg.selectAll("a").selectAll("text").remove()
        svg.append("a").append("text")
            .attr("x", 600)
            .attr("y", 40)
            .attr("font-size", "40px")
            .text(function(){
                return(
                      (showKey == "vender") ? "<%= @hservices.find_by(keyName: "vender").serviceName %>"
                    : (showKey == "kyougi") ? "<%= @hservices.find_by(keyName: "kyougi").serviceName %>"
                    : (showKey == "kiban") ? "<%= @hservices.find_by(keyName: "kiban").serviceName %>"
                    : (showKey == "el_kyodo") ? "<%= @hservices.find_by(keyName: "el_kyodo").serviceName %>"
                    : (showKey == "kokaike") ? "<%= @hservices.find_by(keyName: "kokaike").serviceName %>"
                    : (showKey == "koumu") ? "<%= @hservices.find_by(keyName: "koumu").serviceName %>"
                    : (showKey == "todoku") ? "<%= @hservices.find_by(keyName: "todoku").serviceName %>"
                    : (showKey == "eac") ? "<%= @hservices.find_by(keyName: "eac").serviceName %>"
                    : (showKey == "frs") ? "<%= @hservices.find_by(keyName: "frs").serviceName %>"
                    : (showKey == "eps") ? "<%= @hservices.find_by(keyName: "eps").serviceName %>"
                    : (showKey == "ca") ? "<%= @hservices.find_by(keyName: "ca").serviceName %>"
                    : (showKey == "gw") ? "<%= @hservices.find_by(keyName: "gw").serviceName %>"
                    : (showKey == "cms") ? "<%= @hservices.find_by(keyName: "cms").serviceName %>"
                    : (showKey == "mail") ? "<%= @hservices.find_by(keyName: "mail").serviceName %>"
                    : (showKey == "bu") ? "<%= @hservices.find_by(keyName: "bu").serviceName %>"
                    : (showKey == "rs") ? "<%= @hservices.find_by(keyName: "rs").serviceName %>"
                    : (showKey == "ps") ? "<%= @hservices.find_by(keyName: "ps").serviceName %>"
                    : (showKey == "ps") ? "<%= @hservices.find_by(keyName: "ps").serviceName %>"
                    : (showKey == "fn") ? "<%= @hservices.find_by(keyName: "fn").serviceName %>"
                    : (showKey == "ns") ? "<%= @hservices.find_by(keyName: "ns").serviceName %>"
                    : (showKey == "ib") ? "<%= @hservices.find_by(keyName: "ib").serviceName %>"
                    : "不明なサービス"
                );
            })
            .on("mouseover", function() {
                var vender = ( showKey == "vender" ) ? "<%= @hservices.find_by(keyName: "vender").comment %>": "";
                var kyougi = ( showKey == "kyougi" ) ? "<%= @hservices.find_by(keyName: "kyougi").comment %>": "";
                var kiban = ( showKey == "kiban" ) ? "<%= @hservices.find_by(keyName: "kiban").comment %>": "";
                var el_kyodo = ( showKey == "el_kyodo" ) ? "<%= @hservices.find_by(keyName: "el_kyodo").comment %>": "";
                var kokaike = ( showKey == "kokaike" ) ? "<%= @hservices.find_by(keyName: "kokaike").comment %>": "";
                var koumu = ( showKey == "koumu" ) ? "<%= @hservices.find_by(keyName: "koumu").comment %>": "";
                var todoku = ( showKey == "todoku" ) ? "<%= @hservices.find_by(keyName: "todoku").comment %>": "";
                var eac = ( showKey == "eac" ) ? "<%= @hservices.find_by(keyName: "eac").comment %>": "";
                var frs = ( showKey == "frs" ) ? "<%= @hservices.find_by(keyName: "frs").comment %>": "";
                var eps = ( showKey == "eps" ) ? "<%= @hservices.find_by(keyName: "eps").comment %>": "";
                var ca = ( showKey == "ca" ) ? "<%= @hservices.find_by(keyName: "ca").comment %>": "";
                var gw = ( showKey == "gw" ) ? "<%= @hservices.find_by(keyName: "gw").comment %>": "";
                var cms = ( showKey == "cms" ) ? "<%= @hservices.find_by(keyName: "cms").comment %>": "";
                var mail = ( showKey == "mail" ) ? "<%= @hservices.find_by(keyName: "mail").comment %>": "";
                var bu = ( showKey == "bu" ) ? "<%= @hservices.find_by(keyName: "bu").comment %>": "";
                var rs = ( showKey == "rs" ) ? "<%= @hservices.find_by(keyName: "rs").comment %>": "";
                var ps = ( showKey == "ps" ) ? "<%= @hservices.find_by(keyName: "ps").comment %>": "";
                var fn = ( showKey == "fn" ) ? "<%= @hservices.find_by(keyName: "fn").comment %>": "";
                var ns = ( showKey == "ns" ) ? "<%= @hservices.find_by(keyName: "ns").comment %>": "";
                var ib = ( showKey == "ib" ) ? "<%= @hservices.find_by(keyName: "ib").comment %>": "";
                var service = vender + kyougi + kiban + el_kyodo + kokaike + koumu + todoku + eac + frs + eps + ca + gw + cms + mail + bu + rs + ps + fn + ns + ib;
                var content = "";
                content += "<center>"+ service + "</center>";
                d3.select(this)
                .transition().duration(100)
                .style("opacity", 1);div3.transition().duration(100)
                .style("opacity", 1)
                div3.html(content)
                .style("left", (d3.event.pageX -300) + "px")
                .style("top", (d3.event.pageY +20) + "px");
            })
            .on("mouseout", function(d) {
                div3.transition().duration(200)
                .style("opacity", 0);
            })
    }

</script>
