<body></body>
<script>

var attrHash = new Object();
var elementsHash = new Object();
var maxHash = new Object();
var minHash = new Object();

// 配列の最大値を求める関数を定義しておく
Array.prototype.max = function () {
    return Math.max.apply(Math, this);
};
Array.prototype.min = function () {
    return Math.min.apply(Math, this);
};
// 数値かどうかを判定する関数を定義しておく
function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}


function readAttrfile(json) {
    attrdata = json;
    readAttrfileDone = true;
}

d3.json("../hokkaido/hokkaido_value", function(error, json) {
    if(error) return console.warn(error);
        readAttrfile(json);
            main(attrdata);
    });

function main(attr) {

  // attr情報をIDをkeyとするhash tableに変換する
  // idをKeyとしたhashテーブル＆property毎のhashテーブルを作成する
  attr.forEach(function(e){
      attrHash[e.cityid]=e;
      for (var k in e) {
          if( k in elementsHash) {
              elementsHash[k].push(e[k]);
          } else {
              elementsHash[k] = [e[k]];
          }
      }
  });
  for (var k in elementsHash) {
      if (isNumeric(elementsHash[k][0])) {
          maxHash[k] = elementsHash[k].max();
          minHash[k] = elementsHash[k].min();
      }
  }

  var width = 700,
      height = 700,
      padding = 1.5, // separation between same-color nodes
      clusterPadding = 6, // separation between different-color nodes
      maxRadius = 12;

  var n = attrdata.length, // total number of nodes
      m = 20; // number of distinct clusters

  var color = d3.scale.category20()
      .domain(d3.range(m));

  // The largest node for each cluster.
  var clusters = new Array(m);

  console.log(attrHash[0])

  var nodes = [];
  var numberOfNotSignedService = 0;
  for(var i in attrHash) {
    if(attrHash[i].bu == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].ca == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].cms == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].cms == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].eac == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].el_kyodo == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].eps == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].et == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].fn == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].frs == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].ft == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].gw == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].ib == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].kokaike == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].kokaike == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].koumu == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].mail == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].pa == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].ps == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].rs == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].ss == "未導入"){ numberOfNotSignedService++; }
    if(attrHash[i].todoku == "未導入"){ numberOfNotSignedService++; }
    attrHash[i].numberOfService = 22 - numberOfNotSignedService;
    nodes.push({
      cluster: 1, 
      name: attrHash[i].cityname,
      radius: attrHash[i].numberOfService,
    });
    d = {
      cluster: 1, 
      name: attrHash[i].cityname,
      radius: attrHash[i].numberOfService
    };
    for (var k = 0; k < m; k++){
      if (!clusters[k] || (attrHash[i].numberOfService > clusters[k].radius)) clusters[k] = d;
    }
    numberOfNotSignedService = 0;
  }

/*/
  var nodes = d3.range(n).map(function() {
    var i = Math.floor(Math.random() * m),　 //０～１９のどれかの数値をランダム生成
        r = Math.sqrt((i + 1) / m * -Math.log(Math.random())) * maxRadius, // 直径
        d = {cluster: i, radius: r};
    if (!clusters[i] || (r > clusters[i].radius)) clusters[i] = d;
    return d;
  });
/*/

  // Use the pack layout to initialize node positions.
  d3.layout.pack()
      .sort(null)
      .size([width, height])
      .children(function(d) { return d.values; })
      .value(function(d) { return d.radius * d.radius; })
      .nodes({values: d3.nest()
        .key(function(d) { return d.cluster; })
        .entries(nodes)});

  // tickイベントによってノードをドラッグできるようにする
  var force = d3.layout.force()
      .nodes(nodes)
      .size([width, height])
      .gravity(.04)
      .charge(0)
      .on("tick", tick)
      .start();

  var svg = d3.select("body").append("svg")
      .attr("width", width)
      .attr("height", height);

  var node = svg.selectAll("circle")
      .data(nodes)
    .enter().append("circle")
      .style("fill", function(d) { return color(d.cluster); })
      .call(force.drag);

  node.transition()
      .duration(750)
      .delay(function(d, i) { return i * 5; })　//アニメーション開始までの時間
      .attrTween("r", function(d) {
        var i = d3.interpolate(0, d.radius);
        return function(t) { return d.radius = i(t); };
      });

  function tick(e) {
    node
        .each(cluster(10 * e.alpha * e.alpha))
        .each(collide(.5))
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

  // Move d to be adjacent to the cluster node.
  function cluster(alpha) {
    return function(d) {
      var cluster = clusters[d.cluster];
      if (cluster === d) return;
      var x = d.x ,
          y = d.y ,
          l = Math.sqrt(x * x + y * y),
          r = d.radius + cluster.radius;
      if (l != r) {
        l = (l - r) / l * alpha;
        d.x -= x *= l;
        d.y -= y *= l;
      }
    };
  }

  // Resolves collisions between d and all other circles.
  function collide(alpha) {
    var quadtree = d3.geom.quadtree(nodes);
    return function(d) {
      var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
          nx1 = d.x - r,
          nx2 = d.x + r,
          ny1 = d.y - r,
          ny2 = d.y + r;
      quadtree.visit(function(quad, x1, y1, x2, y2) {
        if (quad.point && (quad.point !== d)) {
          var x = d.x - quad.point.x,
              y = d.y - quad.point.y,
              l = Math.sqrt(x * x + y * y),
              r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
          if (l < r) {
            l = (l - r) / l * alpha;
            d.x -= x *= l;
            d.y -= y *= l;
            quad.point.x += x;
            quad.point.y += y;
          }
        }
        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
      });
    };
  }
}
</script>